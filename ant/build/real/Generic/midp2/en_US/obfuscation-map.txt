AbstractDao -> s:
    int numOfAttribs -> n
    java.lang.String[] getAttributes(java.lang.String) -> a
    java.util.Hashtable getTable(java.lang.String) -> a
    java.lang.String tableToString(java.util.Hashtable) -> a
AbstractService -> o:
    java.lang.String recordStoreName -> a
    RecordStoreManager rsm -> a
AllowedCell -> bn:
    java.lang.String[] unitType -> a
    int numberOfCells -> a
    int numberOfTypes -> b
    GroundCell[] allowed -> a
    boolean negative -> a
    int current -> c
    int currentT -> d
    void addCell(GroundCell) -> a
    void addType(java.lang.String) -> a
    boolean containsType(java.lang.String) -> a
    boolean containsCell(GroundCell) -> a
Animation -> bz:
    int x -> c
    int y -> d
    int endFrame -> e
    javax.microedition.lcdui.game.Sprite sprite -> a
    boolean animatedOnce -> a
    int frameSkipRate -> f
    int frameCurrent -> g
    javax.microedition.lcdui.game.Sprite getInitialSprite() -> a
    boolean animate(javax.microedition.lcdui.Graphics) -> a
    int getSizeX() -> a
    int getSizeY() -> b
    void setX(int) -> a
    void setY(int) -> b
    void executeCustomMethods() -> a
AnimationThread -> as:
    boolean releaseResourcesOnScreenChange -> a
    ArrayList animationList -> a
    void run() -> run
ArrayList -> i:
    java.lang.Object[] storedObjects -> a
    int growthFactor -> b
    int size -> a
    boolean contains(java.lang.Object) -> a
    java.lang.Object get(int) -> a
    java.lang.Object remove(int) -> b
    void clear() -> a
    void add(java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.lang.Object[] toArray(java.lang.Object[]) -> a
    void increaseCapacity() -> b
Background -> a:
    int borderWidth -> a
    boolean animate() -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void releaseResources() -> a
BaseBuilding -> bq:
    Building buildingBase -> a
    java.lang.String buildingId -> a
    java.lang.String buildingType -> d
    int x -> a
    int y -> b
    javax.microedition.lcdui.game.Sprite pic -> a
    java.lang.String missionId -> b
    int strength -> c
    int status -> d
    java.util.Hashtable resourceMatrix -> a
    java.lang.String owener -> c
    Environment environment -> a
    void setEnvironmentAndPicture(Environment) -> a
    java.lang.String getOwener() -> a
    boolean isAllowedCell(int,int,int,int) -> a
    int getSizeX() -> a
    int getSizeY() -> b
    int getX() -> c
    void setX(int) -> a
    int getY() -> d
    void setY(int) -> b
    int getStrength() -> e
    void setStrength(int) -> c
    int getStatus() -> f
    java.lang.String toString() -> toString
    void openFire(int) -> d
    void fire$21246f5f(BaseUnit) -> a
    void fire() -> c
    Building getBase() -> a
    javax.microedition.lcdui.game.Sprite getSprite() -> a
    void updateResourceMatrix() -> a
    boolean isMyUnit$21246f63(BaseUnit) -> a
    boolean moveTimerFire(int) -> a
    boolean updateBuildingStatus(int) -> b
    boolean isStillCreating() -> a
    void updateStatus(int) -> e
    void distroy() -> b
BaseBuildingService -> m:
    BaseBuildingService me -> a
    BaseBuildingService getInstance() -> a
    void insert(BaseBuilding) -> a
    void insertOrUpdate(java.util.Hashtable) -> a
    void update(BaseBuilding) -> c
    void insertOrUpdate(BaseBuilding) -> d
    void delete(BaseBuilding) -> b
    java.util.Hashtable getAll() -> a
BaseUnit -> bd:
    int thinkRate -> j
    Unit unitBase -> a
    java.lang.String unitId -> a
    java.lang.String unitType -> b
    int x -> k
    int y -> l
    javax.microedition.lcdui.game.Sprite pic -> a
    java.lang.String missionId -> c
    int strength -> m
    java.lang.String owener -> d
    Environment environment -> a
    void setOtherParam() -> e
    void setEnvironmentAndPicture(Environment) -> a
    boolean isAllowedCell(int,int) -> a
    boolean isAllowedCell(int,int,int,int) -> a
    int getSizeX() -> a
    int getSizeY() -> b
    int getX() -> c
    void setX(int) -> d
    int getY() -> d
    void setY(int) -> e
    void registerMove(int,int) -> a
    int getStrength() -> e
    void setStrength(int) -> f
    java.lang.String getOwener() -> a
    java.lang.String toString() -> toString
    void move(int) -> a
    void openFire(int) -> b
    void fire() -> a
    Unit getBase() -> a
    javax.microedition.lcdui.game.Sprite getSprite() -> a
    boolean moveTimer(int) -> a
    boolean moveTimerFire(int) -> b
    boolean thinkTimer(int) -> c
    int findDirection(int,int) -> a
    boolean isMyUnit$21246f63(BaseUnit) -> a
    boolean isMyBuilding$5a26a2b3(BaseBuilding) -> a
    boolean getEngagedInFire() -> a
    void dontFollow$21246f5f(BaseUnit) -> b
    void distroy() -> b
    void think(int) -> c
    void suspendFollow() -> c
    void followUnit$21246f5f(BaseUnit) -> a
    void playMoveSound() -> d
    void setLastUnitFiredMe$21246f5f(BaseUnit) -> c
    BaseUnit getLastUnitFiredMe$38e4b99() -> a
    boolean isInBounds() -> b
BaseUnitService -> bf:
    BaseUnitService me -> a
    BaseUnitService getInstance() -> a
    void insert(BaseUnit) -> a
    void insertOrUpdate(java.util.Hashtable) -> a
    void update(BaseUnit) -> c
    void insertOrUpdate(BaseUnit) -> d
    void delete(BaseUnit) -> b
    java.util.Hashtable getAll() -> a
BigExplosion -> ae:
    javax.microedition.lcdui.Image explosion1 -> a
    Environment en -> a
    int range -> a
    int hurtValue -> b
    javax.microedition.lcdui.game.Sprite getInitialSprite() -> a
    void hurtUnits() -> b
    void hurtBuildings() -> c
    void executeCustomMethods() -> a
BigFire -> x:
    javax.microedition.lcdui.Image explosion1 -> a
    javax.microedition.lcdui.game.Sprite getInitialSprite() -> a
    Animation getCustomAnimation() -> a
    void updateCustomAnimation(Animation) -> a
    int getStartFrame(int,int) -> a
BitMapFont -> bj:
    java.util.Hashtable fontsByUrl -> a
    java.lang.String fontUrl -> a
    javax.microedition.lcdui.Image fontImage -> a
    boolean hasMixedCase -> a
    byte[] characterWidths -> a
    short[] xPositions -> a
    java.lang.String characterMap -> b
    int fontHeight -> a
    int spaceIndex -> b
    BitMapFontViewer getViewer(java.lang.String) -> a
    BitMapFont getInstance(java.lang.String) -> a
BitMapFontViewer -> bk:
    javax.microedition.lcdui.Image image -> a
    short[] xPositions -> a
    byte[] usedCharactersWidths -> a
    int fontHeight -> c
    int verticalPadding -> d
    int spaceIndex -> e
    int height -> a
    int width -> b
    int numberOfLines -> f
    short[] lineWidths -> b
    int[] indeces -> a
    byte[] actualCharacterWidths -> b
    int orientation -> g
    void paint(int,int,javax.microedition.lcdui.Graphics) -> a
    void layout(int,int,int,int) -> a
    short[] increaseShortArraySize(short[],byte) -> a
Border -> c:
    int borderWidth -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
BorderedRoundRectBackground -> d:
    int color -> b
    int arcWidth -> c
    int arcHeight -> d
    int borderColor -> e
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
Building -> ab:
    java.lang.String id -> a
    java.lang.String totalStrength -> b
    java.lang.String strength -> c
    java.util.Hashtable unitLevels -> a
    java.lang.String level -> d
    java.util.Hashtable resourceMatrix -> b
    java.util.Hashtable levelMatrix -> c
    java.lang.String maxLevel -> e
    java.lang.String delay -> f
    java.lang.String description -> g
    int x -> a
    int y -> b
    java.lang.String type -> h
    java.lang.String toString() -> toString
BuildingService -> bm:
    BuildingService me -> a
    BuildingService getInstance() -> a
    java.util.Hashtable getAllBuildings() -> a
ChildForm -> bh:
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
ChoiceGroup -> e:
    javax.microedition.lcdui.Command MARK_COMMAND -> a
    javax.microedition.lcdui.Command UNMARK_COMMAND -> b
    int selectedIndex -> J
    boolean isMultiple -> j
    int choiceType -> K
    boolean isImplicit -> k
    javax.microedition.lcdui.Command selectCommand -> d
    ChoiceGroup additionalItemCommandListener$1a40669b -> b
    ChoiceItem[] buildChoiceItems(java.lang.String[],javax.microedition.lcdui.Image[],int,Style) -> a
    java.lang.String getString(int) -> a
    int append(ChoiceItem) -> a
    int append(ChoiceItem,Style) -> a
    void set(int,java.lang.String,javax.microedition.lcdui.Image,Style) -> a
    void deleteAll() -> a
    int getSelectedIndex() -> a
    void setSelectedIndex(int,boolean) -> a
    boolean handleKeyPressed(int,int) -> a
    void setStyle(Style,boolean) -> a
    void commandAction(javax.microedition.lcdui.Command,Item) -> a
ChoiceItem -> ay:
    javax.microedition.lcdui.Image defaultRadioSelected -> b
    javax.microedition.lcdui.Image defaultRadioPlain -> c
    javax.microedition.lcdui.Image defaultCheckSelected -> d
    javax.microedition.lcdui.Image defaultCheckPlain -> e
    boolean isMultiple -> c
    javax.microedition.lcdui.Image selected -> f
    javax.microedition.lcdui.Image plain -> g
    boolean isSelected -> a
    javax.microedition.lcdui.Image boxImage -> h
    int boxWidth -> b
    int yAdjust -> c
    boolean drawBox -> b
    int boxColor -> d
    boolean drawNoPlain -> j
    int yBoxAdjust -> e
    void initContent(int,int) -> a
    javax.microedition.lcdui.Image createSelected() -> a
    javax.microedition.lcdui.Image createPlain() -> b
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(Style) -> a
    void select(boolean) -> a
    void toggleSelect() -> a
Color -> l:
    int argb -> a
    boolean isDynamic -> a
    java.lang.Integer integer -> a
    java.lang.Integer getInteger() -> a
    int getColor() -> a
    java.lang.String toString() -> toString
Container -> al:
    ArrayList itemsList -> a
    Item[] items -> a
    boolean autoFocusEnabled -> a
    int autoFocusIndex -> a
    Style itemStyle -> a
    Item focusedItem -> a
    int focusedIndex -> b
    boolean enableScrolling -> b
    boolean allowCycling -> c
    int yOffset -> c
    int targetYOffset -> d
    int focusedTopMargin -> J
    ContainerView containerView -> a
    boolean isScrollRequired -> j
    int availableHeight -> e
    void setScrollHeight(int) -> a
    void add(Item) -> a
    void clear() -> b
    Item[] getItems() -> a
    void focus(int,Item,int) -> a
    void scroll(int,Item) -> a
    void scroll(int,int,int,int,int) -> a
    void initContent(int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyReleased(int,int) -> b
    boolean handleKeyRepeated(int,int) -> c
    boolean shiftFocus(boolean,int) -> a
    void setStyle(Style) -> a
    void setStyle(Style,boolean) -> a
    Style focus(Style,int) -> a
    void defocus(Style) -> b
    boolean animate() -> a
    void showNotify() -> c
    void hideNotify() -> d
    void requestFullInit() -> e
    int getScrollYOffset() -> b
    void setScrollYOffset(int,boolean) -> b
ContainerView -> ah:
    int focusedIndex -> a
    Container parentContainer -> a
    boolean focusFirstElement -> a
    int appearanceMode -> b
    Item focusedItem -> a
    int columnsSetting -> c
    int numberOfColumns -> d
    int[] columnsWidths -> a
    int[] rowsHeights -> b
    int numberOfRows -> e
    boolean allowCycling -> b
    boolean allowsAutoTraversal -> c
    void initContent(Item,int,int) -> a
    boolean isLayoutExpand() -> a
    void paintContent$9a1425b(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintContent$66abd826(Item[],int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintItem$e166f86(Item,int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    Item getNextItem(int,int) -> a
    Item shiftFocus(boolean,int,Item[]) -> a
    void focusItem(int,Item) -> a
    void focusItem(int,Item,int) -> a
    void focus$53759658(Style) -> a
    void defocus(Style) -> b
    void setStyle(Style) -> c
    Item getNextFocusableItem(Item[],boolean,int,boolean) -> a
    boolean animate() -> b
    boolean handleKeyPressed(int,int) -> a
CurserManager -> k:
    Environment en -> a
    int curserSpeed -> a
    int height -> b
    int width -> c
    UnitManager um -> a
    GameProxy gp -> a
    int getX() -> a
    int getY() -> b
    void moveUp() -> a
    void moveDown() -> b
    void moveLeft() -> c
    void moveRight() -> d
    void moveScreenUp() -> e
    void moveScreenDown() -> f
    void moveScreenLeft() -> g
    void moveScreenRight() -> h
    void delete() -> i
    void clicked(PlanetMap) -> a
    void cancel() -> j
    void changeMoveCurser() -> m
    void incCurserSpeed() -> k
    void resetCurserSpeed() -> l
DuplicateDataException -> ag:
DynamicUnit -> h:
    boolean truckMove -> a
    BaseUnit lastUnitFiredMe$35ccc3ba -> a
    boolean lastFiredUnitUpdated -> b
    boolean lastMoveStatus -> c
    long lastMovedTime -> a
    int STEP -> o
    int moveToX -> a
    int moveToY -> b
    boolean moveMe -> d
    int sizeRatio -> c
    boolean dirPriority -> e
    int[] repeatBufferX -> a
    int[] repeatBufferY -> b
    boolean regMoveChanged -> f
    int originalRegX -> d
    int originalRegY -> e
    int offsetX -> f
    int offsetY -> g
    java.util.Random rand -> a
    int numberOfLessTurns -> h
    int movesFromLastTurn -> i
    BaseUnit unitToFollow$35ccc3ba -> b
    boolean engaged -> g
    void detectRepeats() -> e
    boolean moveLeftOrRight(int) -> d
    boolean moveRightOrLeft(int) -> e
    boolean moveUpOrDown(int) -> f
    boolean moveDownOrUp(int) -> g
    void switchSizeRatio() -> f
    void move(int) -> a
    void openFire(int) -> b
    void fire$21246f5f(BaseUnit) -> d
    void fire$5a26a2af(BaseBuilding) -> a
    void fire() -> a
    boolean getFirePossible(java.lang.String,java.lang.String) -> a
    MovingAnimation getFireByUnit(Environment,int,int,int,int) -> a
    void stop() -> g
    void pause() -> h
    void resume() -> i
    Unit getBase() -> a
    javax.microedition.lcdui.game.Sprite getSprite() -> a
    void registerMove(int,int) -> a
    void faceLeft() -> j
    void faceRight() -> k
    void faceUp() -> l
    void faceDown() -> m
    void fly$13462e() -> n
    void pushLeft() -> o
    void pushRight() -> p
    void pushUp() -> q
    void pushDown() -> r
    int getCurrentDirection() -> f
    boolean turnLeft() -> c
    boolean turnRight() -> d
    boolean turnUp() -> e
    boolean turnDown() -> f
    boolean moveLeft(int) -> h
    boolean moveRight(int) -> i
    boolean moveUp(int) -> j
    boolean moveDown(int) -> k
    void changeRegistredMove() -> s
    boolean turnToDirection(int,int) -> b
    void callForHelp() -> t
    void moveToMe$21246f5f(BaseUnit) -> e
    boolean getEngagedInFire() -> a
    void followUnit$21246f5f(BaseUnit) -> a
    void refreshFollowing() -> u
    void distroy() -> b
    void dontFollow$21246f5f(BaseUnit) -> b
    void suspendFollow() -> c
    void think(int) -> c
    void playMoveSound() -> d
    void playFireSound() -> v
    void playFlySound() -> w
    BaseUnit getLastUnitFiredMe$38e4b99() -> a
    void setLastUnitFiredMe$21246f5f(BaseUnit) -> c
EnvirnmentRenderer -> b:
    int UNIT_MARGIN -> a
    void render(Environment,javax.microedition.lcdui.Graphics,int,int) -> a
    void renderGround(Environment,javax.microedition.lcdui.Graphics,int,int) -> b
    void renderCurser$433d6433(Environment,javax.microedition.lcdui.Graphics) -> a
    void drawHealthLine(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void drawStatusLine(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    void renderGroundUnits(Environment,javax.microedition.lcdui.Graphics,int,int) -> c
    void renderAirUnits(Environment,javax.microedition.lcdui.Graphics,int,int) -> d
    void renderBuildings(Environment,javax.microedition.lcdui.Graphics,int,int) -> e
    void renderExplosions$433d6433(Environment,javax.microedition.lcdui.Graphics) -> b
    void renderTrees(Environment,javax.microedition.lcdui.Graphics,int,int) -> f
    void renderFires$433d6433(Environment,javax.microedition.lcdui.Graphics) -> c
Environment -> bx:
    boolean initialized -> a
    int iniParam -> a
    GroundCell[][] ground -> a
    int startPointX -> b
    int startPointY -> c
    int sizeX -> d
    int sizeY -> e
    int screenSizeX -> f
    int screenSizeY -> g
    int cellSizeX -> h
    int cellSizeY -> i
    javax.microedition.lcdui.game.Sprite curser -> a
    java.util.Hashtable units -> a
    java.util.Hashtable buildings -> b
    java.util.Hashtable explosions -> c
    java.util.Hashtable trees -> d
    java.util.Hashtable fires -> e
    UnitManager um -> a
    java.util.Random r -> a
    void setStartPoint(int,int) -> a
    void setCellSize(int,int) -> b
    void setSize(int,int) -> c
    GroundCell getCellType(int,int) -> a
    Point getGroundPoint(int,int) -> a
    int getClosestDiv(int,int) -> a
    Point[] getCellsInRange(int,int,int,int) -> a
    void addExplosion(Animation) -> a
    void addFire(MovingAnimation) -> a
Form -> t:
    ItemStateListener itemStateListener -> a
    ArrayList stateNotifyQueue -> a
    void addToStateNotifyQueue(Item) -> a
    void notifyStateListener() -> a
    boolean animate() -> a
FormAlert -> bl:
    int WARNING -> k
    int MESSAGE -> l
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdCancel -> a
    javax.microedition.lcdui.Command cmdOk -> b
    javax.microedition.lcdui.Command cmdMsgYes -> c
    javax.microedition.lcdui.Command cmdNo -> d
    List menuScreen -> a
    int type -> m
    void addCommands() -> c
    javax.microedition.lcdui.Image getIconFromType() -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormBaseResourceBuilding -> bs:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    List menuScreen -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormBuilding -> f:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    javax.microedition.lcdui.Command cmdMore -> b
    javax.microedition.lcdui.Command cmdUpgrade -> c
    List menuScreen -> a
    boolean select -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormBuildingUnits -> af:
    ChildForm parent -> a
    Building building -> a
    javax.microedition.lcdui.Command cmdBack -> a
    javax.microedition.lcdui.Command cmdDetails -> b
    List menuScreen -> a
    java.lang.String fromMap -> a
    void updateScreen(GameProxy) -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormHelpCont -> au:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    List menuScreen -> a
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
FormHelpTopics -> w:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    List menuScreen -> a
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
FormQuickLinks -> bw:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdExit -> a
    List menuScreen -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormResources -> r:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    javax.microedition.lcdui.Command cmdUpdate -> b
    List menuScreen -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
    void update() -> c
FormResourcesBuilding -> j:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    javax.microedition.lcdui.Command cmdUpgrade -> b
    Building building -> a
    List menuScreen -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormSpeed -> aw:
    ChildForm parent -> a
    List menuSpeed -> a
    javax.microedition.lcdui.Command cmdOk -> a
    java.lang.String sp -> a
    void initialize() -> c
    void createLangMenu() -> d
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
FormUnitDetails -> by:
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    List menuScreen -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
Game -> bp:
    FormResources updatable$671e960f -> a
    int runTimes -> a
    void run() -> run
    void updateScreen() -> b
    void unregisterResourceMenu() -> a
GameLogic -> ar:
    GameLogic ourInstance -> a
    GameLogic getInstance() -> a
    int createUnit(Unit) -> a
    int createBuilding(Building) -> a
    int upgradeBuilding(Building) -> b
    int getTotalNumberOfAllayBuildingsByBaseType(java.lang.String) -> a
    int getAllowedPopulation() -> a
GameProxy -> br:
    java.lang.String saveName -> a
    java.util.Hashtable players -> a
    Player humanPlayer -> a
    java.lang.String map -> b
    java.util.Hashtable getBuildingLevels() -> a
    java.util.Hashtable getUnitAmounts() -> b
Ground -> am:
    java.util.Random rand -> a
    java.util.Hashtable cellCash -> a
    int width -> a
    int height -> b
    javax.microedition.lcdui.Image getGroundCell(GroundCell) -> a
    javax.microedition.lcdui.Image getCachedGroundCell(GroundCell) -> b
    int getFrame(int,int) -> a
    GroundCell[][] getGroundFromMap(java.lang.String) -> a
    Environment getEnvironment(java.lang.String,java.lang.String) -> a
    void addBuildings(Environment,java.lang.String) -> a
    void addUnits(Environment,java.lang.String) -> b
    java.lang.String[] getShape(java.lang.String) -> a
    GroundCell[] getCell(java.lang.String) -> a
    javax.microedition.lcdui.Image cropImage(javax.microedition.lcdui.Image,int,int,int) -> a
    javax.microedition.lcdui.Image cropAlphaImage(javax.microedition.lcdui.Image,int,int,int,int) -> a
GroundCell -> ao:
    int W -> a
    int H -> b
    int alpha -> c
    int x -> d
    int y -> e
    int ox -> f
    int oy -> g
    boolean equals(java.lang.Object) -> equals
    java.lang.String getUniqueKey() -> a
    java.lang.String toString() -> toString
IconItem -> ak:
    javax.microedition.lcdui.Image image -> a
    int imageAlign -> b
    int imageHeight -> c
    int imageWidth -> d
    int yAdjustText -> e
    int yAdjustImage -> J
    void initContent(int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(Style) -> a
    void setImage(javax.microedition.lcdui.Image) -> a
    void setImage(javax.microedition.lcdui.Image,Style) -> a
ImageUtility -> bg:
    javax.microedition.lcdui.Image replaceColourBlue(javax.microedition.lcdui.Image) -> a
Item -> az:
    int layout -> f
    ChoiceGroup itemCommandListener$1a40669b -> a
    javax.microedition.lcdui.Command defaultCommand -> c
    int minimumWidth -> g
    int minimumHeight -> h
    boolean isInitialized -> d
    Background background -> a
    Border border -> a
    Style style -> b
    int itemWidth -> i
    int itemHeight -> j
    int paddingLeft -> k
    int paddingTop -> l
    int paddingRight -> m
    int paddingBottom -> n
    int paddingVertical -> o
    int paddingHorizontal -> p
    int marginLeft -> q
    int marginTop -> r
    int marginRight -> s
    int marginBottom -> t
    int contentWidth -> u
    int contentHeight -> v
    int borderWidth -> w
    int backgroundWidth -> x
    int backgroundHeight -> y
    int appearanceMode -> z
    Screen screen -> a
    boolean isStyleInitialised -> e
    Item parent -> b
    ArrayList commands -> b
    boolean isLayoutCenter -> f
    boolean isLayoutExpand -> g
    boolean isLayoutRight -> h
    int relativeX -> A
    int relativeY -> B
    int contentX -> C
    int contentY -> D
    int internalX -> E
    int internalY -> F
    int internalWidth -> G
    int internalHeight -> H
    boolean isFocused -> i
    Style labelStyle -> c
    StringItem label -> a
    boolean useSingleRow -> a
    Style focusedStyle -> d
    int backgroundYOffset -> I
    ItemView view -> a
    void setLabel(java.lang.String) -> a
    void setLayout(int) -> b
    void setStyle(Style) -> a
    int getItemWidth(int,int) -> a
    int getItemHeight(int,int) -> b
    void addCommand(javax.microedition.lcdui.Command) -> a
    void repaintFully() -> f
    void repaint() -> g
    void repaint(int,int,int,int) -> a
    void requestInit() -> h
    Screen getScreen() -> a
    void notifyStateChanged() -> i
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    void init(int,int) -> b
    void initContent(int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyRepeated(int,int) -> c
    boolean handleKeyReleased(int,int) -> b
    boolean animate() -> a
    Style focus(Style,int) -> a
    void defocus(Style) -> b
    void showNotify() -> c
    void hideNotify() -> d
ItemStateListener -> n:
ItemView -> an:
    int contentWidth -> f
    int contentHeight -> g
    int paddingVertical -> h
    int paddingHorizontal -> i
    int layout -> j
    boolean isLayoutCenter -> d
    boolean isLayoutRight -> e
    Item parentItem -> b
    void initContent(Item,int,int) -> a
    void paintContent$9a1425b(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(Style) -> c
    boolean animate() -> b
JCageConfigurator -> ca:
    java.lang.String UNIT_GROUND_A -> a
    java.lang.String UNIT_GROUND_B -> b
    java.lang.String UNIT_GROUND_WATER_A -> c
    java.lang.String UNIT_GROUND_SHALLOWWATER_A -> d
    java.lang.String UNIT_GROUND_HUMAN_A -> e
    java.lang.String UNIT_GROUND_HUMAN_B -> f
    java.lang.String UNIT_GROUND_HUMAN_C -> g
    java.lang.String UNIT_AIR_A -> h
    java.lang.String UNIT_AIR_B -> i
    java.lang.String BUILDING_DEFEND -> j
    java.lang.String BUILDING_RESOURCE -> k
    java.lang.String BUILDING_UNIT -> l
    int resourceNeedMultiplicationAmountBuilding -> a
    int resourceNeedMultiplicationAmountUnit -> b
    int populationCalculationBuildingWeight -> c
    int resourceProductionFactor -> d
    java.lang.String SYSTEM_RECORDSTORE_NAME -> m
    java.util.Hashtable resources -> a
    java.util.Hashtable buildings -> b
    java.util.Hashtable units -> c
    java.util.Hashtable unitTypeAllowedCells -> d
    java.util.Hashtable maps -> e
    GameProxy currentProxy -> a
    Building currentSelectedBuilding -> a
    Unit currentSelectedUnit -> a
    BaseBuilding currentSelectedBaseBuilding -> a
    MainMid mainMidlet -> a
    java.util.Timer gameTimer -> a
    Game game -> a
    ChildForm currentScreen -> a
    javax.microedition.lcdui.Display display -> a
    java.lang.String user -> n
    java.lang.Object getSelectedIndex(int,java.util.Hashtable) -> a
    Building getBuildingById(java.lang.String) -> a
    Unit getUnitById(java.lang.String) -> a
    int getUnitTotal() -> a
    Resource getResourceById(java.lang.String) -> a
    void display(ChildForm) -> a
    void displayParent() -> a
    void loadMetaData() -> b
    void startNewGame(GameProxy) -> a
    void startGameTimer() -> c
    void loadResources() -> d
    void loadBuildings() -> e
    void loadUnits() -> f
    void loadMaps() -> g
    void defineUnitTypeAllowedCells() -> h
    boolean isCellValied(java.lang.String,GroundCell) -> a
    void updateSpeed() -> i
List -> ax:
    javax.microedition.lcdui.Command SELECT_COMMAND -> a
    javax.microedition.lcdui.Command selectCommand -> b
    int listType -> k
    ChoiceGroup choiceGroup -> a
    java.lang.String getString(int) -> a
    int append(java.lang.String,javax.microedition.lcdui.Image,Style) -> a
    int append(ChoiceItem) -> a
    void set(int,java.lang.String,javax.microedition.lcdui.Image,Style) -> a
    void deleteAll() -> a
    int getSelectedIndex() -> a
    void setSelectedIndex(int,boolean) -> a
    void removeCommand(javax.microedition.lcdui.Command) -> removeCommand
MIDP2LayoutView -> p:
    ArrayList allRows -> a
    ArrayList currentRow -> b
    int rowWidth -> k
    int rowHeight -> l
    int horizontalOffset -> m
    int currentContentHeight -> n
    void initContent(Item,int,int) -> a
    void appendItemToRow(int,Item,int,int) -> a
    void rowBreak(int,int) -> a
    void paintContent$9a1425b(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    Item getNextItem(int,int) -> a
    Item getItemByHorizontalOffset(ArrayList,int) -> a
MainMid -> MainMid:
    List menuScreen -> a
    JCageConfigurator clientConfigurator -> a
    JCageConfigurator getClientConfigurator() -> a
    void startApp() -> startApp
    void createMenu() -> a
    void initialize() -> b
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
    javax.microedition.lcdui.Image getImage(java.lang.String) -> a
    javax.microedition.lcdui.Image getSpriteImage(java.lang.String,int,int,int) -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
MovingAnimation -> cb:
    int x -> a
    int y -> b
    int lastX -> c
    int lastY -> d
    int startX -> e
    int startY -> f
    int endX -> g
    int endY -> h
    int startFrame -> i
    int endFrame -> j
    javax.microedition.lcdui.game.Sprite sprite -> a
    boolean animatedOnce -> a
    int frameSkipRate -> k
    int frameCurrent -> l
    int xSpeed -> m
    int ySpeed -> n
    Environment en -> a
    long creationTime -> a
    javax.microedition.lcdui.game.Sprite getInitialSprite() -> a
    void setSpriteNextFrame() -> b
    boolean isAnimationEnd(int,int) -> a
    void updatePosition(int,int) -> a
    void moveSprite() -> a
    boolean animate(javax.microedition.lcdui.Graphics) -> a
    Animation getCustomAnimation() -> a
    void updateCustomAnimation(Animation) -> a
    int getStartFrame(int,int) -> a
    int getSizeX() -> a
    int getSizeY() -> b
PlanetMap -> bo:
    int timer -> a
    java.lang.Thread myThread -> a
    boolean exec -> a
    ChildForm parent -> a
    javax.microedition.lcdui.Command cmdBack -> a
    Environment en -> a
    int lastArrowKey -> b
    int refreshPeriod -> c
    CurserManager cm -> a
    UnitManager um -> a
    int startFlag -> d
    boolean finished -> b
    GameProxy gameProxy -> a
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void drawGround(javax.microedition.lcdui.Graphics) -> a
    void run() -> run
    void handleBuildingCreation() -> a
    void handleUnitCreation() -> b
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    ChildForm getParent() -> a
    javax.microedition.lcdui.Displayable getDisplay() -> a
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
Player -> bi:
    java.lang.String name -> a
    java.util.Hashtable buildingLevels -> a
Point -> aq:
    int x -> a
    int y -> b
    boolean equals(java.lang.Object) -> equals
RecordStoreManager -> u:
    RecordStoreManager me -> a
    RecordStoreManager getInstance() -> a
    java.lang.String[] getRecordById(java.lang.String,java.lang.String) -> a
    java.util.Hashtable getRecordPairs(java.lang.String) -> a
    int createRecord(java.lang.String,java.lang.String) -> a
    void deleteRecord(java.lang.String,int) -> a
    int updateRecord(java.lang.String,java.lang.String,int) -> a
Resource -> bt:
    java.lang.String id -> a
    java.lang.String amount -> b
    java.lang.String rate -> c
    java.lang.String description -> d
    int getAmount() -> a
    java.lang.String toString() -> toString
ResourceService -> bu:
    ResourceService me -> a
    ResourceService getInstance() -> a
    void insertResource(Resource) -> b
    void updateResource(Resource) -> c
    void insertOrUpdate(Resource) -> a
RoundRectBorder -> y:
    int color -> b
    int arcWidth -> c
    int arcHeight -> d
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
Screen -> av:
    Item subTitle -> a
    int subTitleHeight -> a
    int titleHeight -> b
    Background background -> a
    Border border -> a
    Style style -> a
    int screenHeight -> c
    int originalScreenHeight -> d
    int screenWidth -> e
    Screen$ForwardCommandListener forwardCommandListener -> a
    Container container -> a
    boolean isLayoutCenter -> a
    boolean isLayoutRight -> b
    boolean isLayoutVCenter -> c
    boolean isLayoutBottom -> d
    boolean isLayoutHorizontalShrink -> e
    boolean isLayoutVerticalShrink -> f
    boolean isInitialized -> g
    Item focusedItem -> b
    ScrollBar scrollBar -> a
    StringItem infoItem -> a
    boolean showInfoItem -> h
    int infoHeight -> f
    int contentX -> g
    int contentY -> h
    int contentWidth -> i
    int contentHeight -> j
    int marginLeft -> k
    int marginRight -> l
    int marginTop -> m
    int marginBottom -> n
    boolean repaintPreviousScreen -> i
    javax.microedition.lcdui.Image previousScreenImage -> a
    Background previousScreenOverlayBackground -> b
    ScreenStateListener screenStateListener -> a
    boolean isScreenChangeDirtyFlag -> j
    java.lang.Object paintLock -> a
    ArrayList itemCommands -> a
    void init() -> a
    void calculateContentArea(int,int,int,int) -> a
    void showNotify() -> showNotify
    void hideNotify() -> hideNotify
    void setStyle(Style) -> a
    boolean animate() -> a
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void paintScreen(javax.microedition.lcdui.Graphics) -> a
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    Item[] getRootItems() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyRepeated(int,int) -> b
    boolean handleKeyReleased(int,int) -> c
    void notifyScreenStateChanged() -> b
    void setCommandListener(javax.microedition.lcdui.CommandListener) -> setCommandListener
    void setItemCommands(Item) -> b
    void removeItemCommands(Item) -> c
    void callCommandListener(javax.microedition.lcdui.Command) -> a
    void setFullScreenMode(boolean) -> setFullScreenMode
    void sizeChanged(int,int) -> sizeChanged
    Item getCurrentItem() -> a
Screen$ForwardCommandListener -> aj:
    javax.microedition.lcdui.CommandListener realCommandListener -> a
    Screen this$0 -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
ScreenInfo -> be:
    Item item -> a
    boolean visible -> a
    int itemY -> a
    int itemX -> b
    boolean positionSet -> b
    boolean isVisible() -> a
    void setScreen(Screen) -> a
    void paint$11c44857(javax.microedition.lcdui.Graphics,int) -> a
ScreenStateListener -> z:
ScrollBar -> bb:
    int sliderColor -> a
    int sliderWidth -> b
    int sliderY -> c
    int sliderHeight -> d
    int scrollBarHeight -> e
    boolean isVisible -> a
    int initScrollBar$69c647e8(int,int,int,int) -> a
    void initContent(int,int) -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(Style) -> a
SimpleBackground -> aa:
    int color -> b
    Color colorObj -> a
    boolean isInitialized -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
SmallExplosion -> ap:
    javax.microedition.lcdui.Image explosion1 -> a
    Environment en -> a
    int range -> a
    int hurtValue -> b
    javax.microedition.lcdui.game.Sprite getInitialSprite() -> a
    void hurtUnits() -> b
    void hurtBuildings() -> c
    void executeCustomMethods() -> a
SmallFire -> bc:
    javax.microedition.lcdui.Image explosion1 -> a
    javax.microedition.lcdui.game.Sprite getInitialSprite() -> a
    Animation getCustomAnimation() -> a
    void updateCustomAnimation(Animation) -> a
    int getStartFrame(int,int) -> a
SoundSynthesizer -> q:
    SoundSynthesizer me -> a
    javax.microedition.media.Player click -> a
    javax.microedition.media.Player humanFire -> b
    javax.microedition.media.Player machineFire -> c
    javax.microedition.media.Player smallExp -> d
    javax.microedition.media.Player bigExp -> e
    javax.microedition.media.Player moveMan -> f
    javax.microedition.media.Player moveTruck -> g
    javax.microedition.media.Player moveHeli -> h
    javax.microedition.media.Player movePlane -> i
    SoundSynthesizer getInstance() -> a
    void playClickSound() -> a
    void playHumanFireSound() -> b
    void playMachineFireSound() -> c
    void playSmallExpFireSound() -> d
    void playbigExpSound() -> e
    void playMoveManSound() -> f
    void playMoveTruckSound() -> g
    void playMoveTruckSound2() -> h
    void playMoveHeliSound() -> i
    void playMovePlaneSound() -> j
    javax.microedition.media.Player getAudioPlayerMdi(java.lang.String,int) -> a
    javax.microedition.media.Player createPlayer(java.lang.String) -> a
    java.lang.String guessContentType(java.lang.String) -> a
StringItem -> v:
    java.lang.String text -> a
    java.lang.String[] textLines -> a
    int textColor -> a
    javax.microedition.lcdui.Font font -> a
    BitMapFont bitMapFont -> a
    BitMapFontViewer bitMapFontViewer -> a
    void setText(java.lang.String) -> b
    void setText(java.lang.String,Style) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void initContent(int,int) -> a
    void setStyle(Style) -> a
StringUtil -> bv:
    java.lang.String breakString(java.lang.String,int,java.lang.String) -> a
Style -> g:
    java.lang.Boolean FALSE -> a
    Background background -> a
    Border border -> a
    javax.microedition.lcdui.Font font -> a
    int fontColor -> a
    Color fontColorObj -> a
    int paddingLeft -> b
    int paddingTop -> c
    int paddingRight -> d
    int paddingBottom -> e
    int paddingVertical -> f
    int paddingHorizontal -> g
    int marginLeft -> h
    int marginTop -> i
    int marginRight -> j
    int marginBottom -> k
    int layout -> l
    short[] attributeKeys -> a
    java.lang.Object[] attributeValues -> a
    java.lang.String getProperty(int) -> a
    java.lang.Object getObjectProperty(int) -> a
    java.lang.Integer getIntProperty(int) -> a
    java.lang.Boolean getBooleanProperty(int) -> a
    void releaseResources() -> a
    int getFontColor() -> a
StyleSheet -> ac:
    java.util.Hashtable imagesByName -> a
    javax.microedition.lcdui.Font defaultFont -> a
    Background defaultBackground -> a
    Border defaultBorder -> a
    Style defaultStyle -> a
    Style mainscreenbeStyle -> b
    Style mainscreenmsgStyle -> c
    Style mainscreeneStyle -> d
    Style mainscreenfStyle -> e
    Style focusedStyle -> f
    Style mainscreenfocuseeStyle -> g
    Style mainscreenfocusebeStyle -> h
    Style browserlinkfocusedStyle -> i
    Style browsertextbolditalicfocusedStyle -> j
    Style maincommandffStyle -> k
    Style browsertextfocusedStyle -> l
    Style browsertextitalicfocusedStyle -> m
    Style browsertextboldfocusedStyle -> n
    Style browserinputfocusedStyle -> o
    Style menufocusedStyle -> p
    Style maincommandfocusmsgStyle -> q
    Style maincommandfocusgStyle -> r
    Style maincommandbeStyle -> s
    Style maincommandfStyle -> t
    Style maincommandeStyle -> u
    Style maincommandmsgStyle -> v
    Style labelStyle -> w
    java.util.Hashtable stylesByName -> b
    Screen currentScreen -> a
    javax.microedition.lcdui.Display display -> a
    AnimationThread animationThread -> a
    void releaseResources() -> a
TextUtil -> at:
    java.lang.String[] split(java.lang.String,char) -> a
    java.lang.String[] wrap(java.lang.String,javax.microedition.lcdui.Font,int,int) -> a
    void wrap$73bd2710(java.lang.String,javax.microedition.lcdui.Font,int,int,ArrayList) -> a
TranslucentSimpleBackground -> ai:
    int argbColor -> b
    int[] buffer -> a
    int lastWidth -> c
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void releaseResources() -> a
Unit -> ad:
    java.lang.String id -> a
    java.lang.String strength -> b
    java.lang.String type -> c
    int delay -> a
    java.util.Hashtable resources -> a
    java.lang.String description -> d
    int amount -> b
    int speed -> c
    int fireRange -> d
    int sizeX -> e
    int sizeY -> f
    java.lang.String toString() -> toString
UnitManager -> ba:
    java.util.Random RAND -> a
    Environment en -> a
    BaseUnit lastSelectedUnit$35ccc3ba -> a
    BaseBuilding lastSelectedBuilding$d0b70a -> a
    boolean unitSelected -> a
    boolean buildingSelected -> b
    BaseBuilding buildingToBuild -> b
    java.util.Hashtable buildingGroundCells -> a
    void setUnitSelected(boolean) -> a
    void setBuildingSelected(boolean) -> b
    BaseUnit getUnitAtLocation$d0dcab9(int,int) -> a
    BaseBuilding getBuildingAtLocation$4dd7d977(int,int) -> a
    BaseBuilding isBuildingCellExists$552e27b0(Point) -> a
    boolean containsItemInArray(java.lang.Object[],java.lang.Object) -> a
    void updateBuildingGroundCells() -> a
    BaseBuilding getFirstBuildingInRange$3d7f6f6d(int,int,int,int,BaseUnit) -> a
    java.util.Hashtable getAllUnitsInRange$e658bb0(int,int,int,int,BaseUnit) -> a
    java.util.Hashtable getAllUnitsInRange(int,int,int,int) -> a
    BaseUnit getFirstEnemyUnitInRange$48fc6113(int,int,int,int,BaseBuilding) -> a
    java.util.Hashtable getEnemyUnitsInRange$e658bb0(int,int,int,int,BaseUnit) -> b
    java.util.Hashtable getAllyUnitsInRange$e658bb0(int,int,int,int,BaseUnit) -> c
    java.util.Hashtable getUnitsInRange$e658bb0(int,int,int,int,BaseUnit) -> d
    java.util.Hashtable getEnemyBuildingsInRange$e658bb0(int,int,int,int,BaseUnit) -> e
    java.util.Hashtable getBuildingsInRange$c11e900(int,int,int,int,BaseBuilding) -> a
    BaseUnit getRandomEnemyUnitInRange$6b8f363d(int,int,int,int,BaseUnit) -> a
    BaseUnit getRandomEnemyUnitInRange$1394b6b0(java.util.Hashtable) -> a
    BaseBuilding getRandomEnemyBuildingInRange$3d7f6f6d(int,int,int,int,BaseUnit) -> b
    void moveAndFireUnits(int) -> a
